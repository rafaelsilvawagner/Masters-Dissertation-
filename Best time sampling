library(GetHFData)
library(plyr)
library(dplyr)
library(lubridate)
library(chron)
library(tictoc)
library(data.table)
library(zoo)
library(SDMTools)

#define the inputs for the assets
#define that i want the stock VALE 5 in a dataframe separated by 5 minutes
assets=c("KROT3","UGPA3","VALE5","BBDC4","PETR4","BVMF3","BBAS3","ITSA4","BRFS3","ABEV3")
number_assets=length(assets)
type.market="equity"
#the negotiation starts at 10:00:00 and ends at 17:00:00
first.time <- '10:00:00'
last.time <- '17:00:00'
#get all available dates in Bovespa ftp for the equity market
contents<-ghfd_get_ftp_contents(type.market="equity")
#Define the period of your data.frame i want 60 trading days
trading_days<-60
last.date<-tail(contents$dates,1)
first.date<-contents$dates[nrow(contents)-trading_days]
dates<-contents$dates[which(contents$dates == last.date):which(contents$dates == first.date)]
#define a janela de agregação de 1 a 300 segundos
agregacão_maxima=300

#Variáveis pro loop
#para cada ativos

for (round_asset in 1:number_assets) {
  asset<-assets[round_assets]
  for(round in 1:agregacão_maxima) {
    time="1 sec"  
    date<-dates[round]
    #############################
    ##Pega Dados
    ############################
    
    
    #Get trades data by raw
    if(file.exists(sprintf("H://treated_variables//times and trades//agg//%s//%s//%s.csv",time,asset,date))){
      trades_agg_1sec <- read.csv(sprintf("H://treated_variables//times and trades//agg//%s//%s//%s.csv",time,asset,date),header=TRUE)
      trades_agg_1sec<- trades_agg_1sec[1:nrow(trades_agg_1sec)-1,2:ncol(trades_agg_1sec)]
    } else {trades_agg_1sec<-ghfd_get_HF_data(my.assets=asset,type.market=type.market,type.data="trades",
      first.date=date,last.date=date,type.output="agg",agg.diff = time,
      first.time =first.time,last.time =last.time,
      dl.dir = "H://ftp.bmf.com.br//MarketData//Bovespa-Vista")
      write.csv(trades_agg_1sec,sprintf("H://treated_variables//times and trades//agg//%s//%s//%s.csv",time,asset,date))
    }
      
    #Get trades data aggregated
    if(file.exists(sprintf("H://treated_variables//times and trades//raw//%s//%s//%s.csv",time,asset,date))){
      trades_raw <- read.csv(sprintf("H://treated_variables//times and trades//raw//%s//%s//%s.csv",time,asset,date))
      trades_raw<-trades_raw[,2:ncol(trades_raw)]
    } else {trades_raw<-ghfd_get_HF_data(my.assets=asset,type.market=type.market,type.data="trades",
      first.date=date,last.date=date,type.output="raw",agg.diff = time,
      first.time =first.time,last.time =last.time,
      dl.dir = "H://ftp.bmf.com.br//MarketData//Bovespa-Vista")
      write.csv(trades_raw,sprintf("H://treated_variables//times and trades//raw//%s//%s//%s.csv",time,asset,date))
    }
      
    
    #############################
    ##Transforma Dados Temporalmente
    ############################
    #coloca TradeTime em chron
    trades_raw$Tradetime<-chron(times=trades_raw$Tradetime)
    trades_agg_1sec$Tradetime<-chron(times=trades_agg_1sec$Tradetime)
    
    #coloca TradeDateTime em Posix
    trades_raw$TradeDateTime<-as.POSIXct(trades_raw$TradeDateTime)
    trades_agg_1sec$TradeDateTime<-as.POSIXct(trades_agg_1sec$TradeDateTime)
    
    #Constrói a sequencia que será analisada nesse loop
    sequencia_temporal=seq(from=as.POSIXct(paste(date,first(trades_agg_1sec$Tradetime))),
                           to=as.POSIXct(paste(date,last(trades_agg_1sec$Tradetime))),
                           by=1)
    
    trades_agg<-data.frame(matrix(0, nrow = length(sequencia_temporal), ncol = ncol(trades_agg_1sec)))
    rownames(trades_agg)<-sequencia_temporal
    colnames(trades_agg)<-colnames(trades_agg_1sec)
    
    #preenche as variáveis com relação a estrutura temporal
    trades_agg$InstrumentSymbol<-asset
    trades_agg$SessionDate<-date
    trades_agg$TradeDateTime<-sequencia_temporal
    trades_agg$Tradetime<-chron(times=strftime(sequencia_temporal, format="%H:%M:%S"))
    
    #cria uma nova variável chamada segundos desde as 09:00:00
    trades_agg$time_opening<-as.numeric(trades_agg$TradeDateTime)-
                                          as.numeric(as.POSIXct(paste(date,"09:00:00")))
    
    
    
    #####Preenche a primeira linha
    trades_agg$n.trades[1]<-trades_agg_1sec$n.trades[1]
    trades_agg$last.price[1]<-trades_agg_1sec$last.price[1]
    trades_agg$weighted.price[1]<-trades_agg_1sec$weighted.price[1]
    trades_agg$period.ret[1]<-trades_agg_1sec$period.ret[1]
    trades_agg$period.ret.volat[1]<-trades_agg_1sec$period.ret.volat[1]
    trades_agg$sum.qtd[1]<-trades_agg_1sec$sum.qtd[1]
    trades_agg$sum.vol[1]<-trades_agg_1sec$sum.vol[1]
    trades_agg$n.buys[1]<-trades_agg_1sec$n.buys[1]
    trades_agg$n.sells[1]<-trades_agg_1sec$n.sells[1]

    ############################################
    ####Preenche aquelas variáveis que já existiam
    ############################################
   
     #numero de negócios
    for (i in 2:nrow(trades_agg)){
      if(nrow(subset(trades_agg_1sec,TradeDateTime<=trades_agg$TradeDateTime[i] &
      TradeDateTime>trades_agg$TradeDateTime[i-1]))>0){
        sub<-subset(trades_agg_1sec,TradeDateTime<=trades_agg$TradeDateTime[i] &
                     TradeDateTime>trades_agg$TradeDateTime[i-1])
        trades_agg$n.trades[i]<-sum(sub$n.trades)
        trades_agg$n.buys[i]<-sum(sub$n.buys)
        trades_agg$n.sells[i]<-sum(sub$n.sells)
        trades_agg$sum.qtd[i]<-sum(sub$sum.qtd)
        trades_agg$sum.vol[i]<-sum(sub$sum.vol)
        trades_agg$last.price[i]<-sum(sub$last.price)
        }
    }
    
    #cria o preço ponderado
    trades_agg$weighted.price<-trades_agg$sum.vol/trades_agg$sum.qtd
    trades_agg$weighted.price[is.nan(trades_agg$weighted.price)]=0
    
    #no last.price faz a ultima observação se carregada para as próximas
    trades_agg$last.price<-na.locf(with(trades_agg, 
                                            ifelse(last.price == 0, NA_real_, last.price)))
  
    #retorno no período
    trades_agg$period.ret[2:nrow(trades_agg)]<-(trades_agg$last.price[2:nrow(trades_agg)]/
                                               trades_agg$last.price[1:nrow(trades_agg)-1])-1
    
    #cria uma coluna pra guardaar 4 variáveis que criaremos
    
    trades_agg[,ncol(trades_agg)+1]=0
    names(trades_agg)[ncol(trades_agg)]<-"vol.buys"
    
    trades_agg[,ncol(trades_agg)+1]=0
    names(trades_agg)[ncol(trades_agg)]<-"vol.sells"
    
    trades_agg[,ncol(trades_agg)+1]=0
    names(trades_agg)[ncol(trades_agg)]<-"weighted.price.buys"    
    
    trades_agg[,ncol(trades_agg)+1]=0
    names(trades_agg)[ncol(trades_agg)]<-"weighted.price.sells"
    
    #recupera a volatilidade ponderada e preenche os vol.buy e vol.sell
    for (i in 2:nrow(trades_agg)){
      if(nrow(subset(trades_raw,TradeDateTime<=trades_agg$TradeDateTime[i] &
                     TradeDateTime>trades_agg$TradeDateTime[i-1]))>0){
        sub<-subset(trades_raw,TradeDateTime<=trades_agg$TradeDateTime[i] &
                      TradeDateTime>trades_agg$TradeDateTime[i-1])
        #recupera a volatilidade pondedrada
        if(nrow(sub)>1){
          trades_agg$period.ret.volat[i]<-wt.var(x=sub$TradePrice,wt=sub$TradedQuantity)
          }
        #recupera vol.buys
        if(nrow(subset(sub,TradeSign==1))>1){
          trades_agg$vol.buys[i]<-sum(subset(sub,TradeSign==1)["TradePrice"]*subset(sub,TradeSign==1)["TradedQuantity"])
          trades_agg$weighted.price.buys[i]<-wt.mean(x=subset(sub,TradeSign==1)["TradePrice"],wt=subset(sub,TradeSign==1)["TradedQuantity"])
        } else {
          trades_agg$vol.buys[i]<-sum(subset(sub,TradeSign==1)["TradePrice"]*subset(sub,TradeSign==1)["TradedQuantity"])
          trades_agg$weighted.price.buys[i]<-sum(subset(sub,TradeSign==1)["TradePrice"]*subset(sub,TradeSign==1)["TradedQuantity"])
        }
        #recupera vol.sells
        if(nrow(subset(sub,TradeSign==-1))>1){
          trades_agg$vol.sells[i]<-sum(subset(sub,TradeSign==-1)["TradePrice"]*subset(sub,TradeSign==-1)["TradedQuantity"])
          trades_agg$weighted.price.sells[i]<-wt.mean(x=subset(sub,TradeSign==1)["TradePrice"],wt=subset(sub,TradeSign==1)["TradedQuantity"])
        } else{
          trades_agg$vol.buys[i]<-sum(subset(sub,TradeSign==-1)["TradePrice"]*subset(sub,TradeSign==-1)["TradedQuantity"])
          trades_agg$weighted.price.buys[i]<-sum(subset(sub,TradeSign==-1)["TradePrice"]*subset(sub,TradeSign==-1)["TradedQuantity"])
        }
        rm(sub)
      }
    }
    

    
       trades_agg$TradeDateTime<-as.integer(as.POSIXct(trades_agg$TradeDateTime,format='%Y-%m-%d %H:%M:%S'))
    #get BOOK !!!!
      
      
      #Get trades data by raw
      #book_raw<-ghfd_get_HF_data(my.assets=assets,type.market="equity",type.data="orders",
      #                             first.date=last.date,last.date=last.date,type.output="raw",
      #                             first.time ="09:00:00",last.time ="18:00:00" )
      
      
      #Get book data aggregated
      if(file.exists(sprintf("H://treated_variables//book//agg//%s//%s//%s.csv",time,asset,date))){
        book_agg <- read.csv(sprintf("H://treated_variables//book//agg//%s//%s//%s.csv",time,asset,date),header=TRUE)
      } else {book_agg<-ghfd_get_HF_data(my.assets=asset,type.market=type.market,type.data="orders",
                        first.date=date,last.date=date,type.output="agg",agg.diff=time,
                        first.time =first.time,last.time =last.time,
                        dl.dir = "H://ftp.bmf.com.br//MarketData//Bovespa-Vista")
              write.csv(book_agg,sprintf("H://treated_variables//book//agg//%s//%s//%s.csv",time,asset,date))
      }
      
      #Get lob
      #df.lob <- ghfd_build_lob(ghfd_get_HF_data(my.assets =assets, 
      #                                          type.data= 'orders',
      #                                          type.matching = 'partial',
      #                                          type.market = "equity",
      #                                          first.date = last.date,
      #                                          last.date = last.date,
      #                                          first.time = '10:00:00',
      #                                          last.time = '17:00:00',
      #                                          type.output = 'raw'
      #)
      date_trades<-trades_agg$Tradetime
      date_trades<-chron(times=date_trades)
      date_book<-book_agg$OrderDatetime
      date_book<-format(strptime(date_book,"%Y-%m-%d %H:%M:%S"),'%H:%M:%S')
      date_book<-chron(times=date_book)
      
      book_agg<-cbind(book_agg[1:(nrow(book_agg)/2),],
                      book_agg[((nrow(book_agg)/2)+1):nrow(book_agg),])
      book_agg<-book_agg[,c(5,6,7,8,10,11,12,17,18,19,20,22,23,24)]
      names(book_agg)[1:14]<-c("n.order.buy", "avg.order.price.buy","max.order.price.buy",
                                   "min.order.price.buy","n.new.order.buy","n.update.order.buy",
                                   "n.cancelled.order.buy",
                                   "n.order.sell", "avg.order.price.sell","max.order.price.sell",
                                   "min.order.price.sell","n.new.order.sell","n.update.order.sell",
                                   "n.cancelled.order.sell")
      
      
  
      
      index<-match(date_trades,date_book)
      book_agg<-book_agg[index,]
      
      book_agg$n.order.buy<-as.numeric(book_agg$n.order.buy)
      book_agg$n.new.order.buy<-as.numeric(book_agg$n.new.order.buy)
      book_agg$n.order.sell<-as.numeric(book_agg$n.order.sell)
      book_agg$avg.order.price.sell<-as.numeric(book_agg$avg.order.price.sell)
      book_agg$n.update.order.sell<-as.numeric(book_agg$n.update.order.sell)
      
      if (exists("final_product")) {
        final_product<-rbind(final_product,cbind(trades_agg,book_agg[,3:ncol(book_agg)]))
      } else {
        final_product<-cbind(trades_agg,book_agg[,3:ncol(book_agg)])
      }
    rm(trades_raw)
    rm(trades_agg)
    rm(book_agg)
  }
}

write.csv(final_product,"C://Users//rwagn//Documents//Dissertacao de Mestrado//teste1.csv")
